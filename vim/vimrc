" Forget compatibility with VI - must be the first line
set nocompatible

"----------------------"
" Encoding
"----------------------"
set encoding=utf-8
if has("multi_byte")
	if &termencoding == ""
		let &termencoding = &encoding
	endif
   set encoding=utf-8                     " better default than latin1
   setglobal fileencoding=utf-8           " change default file encoding when writing new files
endif


"----------------------"
" Filetype
"----------------------"
filetype on
filetype indent on
filetype plugin on
syntax on
" Custom Filetypes
au BufNewFile,BufRead *.less set filetype=css " Recognize .less files as .css


"-----------------------------"
" Abbreviations and Shortcuts
"-----------------------------"
" Override <leader> defaults
let mapleader = ","
let maplocalleader = ","
" Lower the timeout after typing the leader key + command
set timeoutlen=500

" ABBREVIATIONS - commands typed in CLI (after colon)
" -------------------------------
" Open current file in Firefox - syntax may differ from one OS to another
abbrev ff :!firefox % &<cr>

" IMAPS - Insert mode shortcuts
" -------------------------------
" Shortcut for ESC
imap jj <esc>

" NMAPS - Normal Mode shortcuts
" -------------------------------
" let semi-colon function as colon (switch to command mode)
nmap ; :
" fast .VIMRC edit
nmap <leader>ev :tabedit $MYVIMRC<cr>
" Quickly cancel highlighted selection
nmap <leader>h :nohlsearch<cr>
" Reload files
nmap <leader>r :checktime<cr>


"----------------------"
" Files & Buffers
"----------------------"
" Write the old file when switching between files
set autowrite
" Switch between buffers without saving
set hidden
" Apply new configuration after .VIMRC is saved
autocmd! bufwritepost .vimrc source %
" Automatically change current directory to that of the file in the buffer
autocmd BufEnter * silent! lcd %:p:h " Better alternative to `autochdir`
" Delete all buffers
nmap <silent> <leader>da :exec "1," . bufnr('$') . "bd"<cr>


"----------------------"
" UI stuff
"----------------------"
set t_Co=256 " Enable 256 colors mode
set background=dark " Used by some colorschemes (for example Solarized theme may be 'dark' or 'light')
colorscheme solarized " Select colorscheme from ~/.vim/colors/
set guifont=*
set number " Show lines numbers
"set relativenumber " Relative line numbering, works in VIM version 7.3 and higher
set linespace=3 " Higher line height - works only in GUI mode, not in terminal..
set laststatus=2 " Show status line
" Customize statusline: [Filename] [Filetype] [GIT] [Cursor Line,Column]
set statusline=%t\ %y\ %{fugitive#statusline()}\ [%l,%c]
" Show additional helpful info (like number of selected lines) in the bottom right of the screen
set showcmd
" Keep current screen unmoved when creating new split screen
set splitbelow
set splitright
" Set incremental search - search when you type, very cool
set incsearch
" Highlight search - looks like it is enabled by default, but anyways
set hlsearch " use :nohlsearch to cancel highlighted selection
" Hide MacVim toolbar
set go-=T
" Hide mouse when typing
set mousehide


"----------------------"
" Indentation & Wrap
"----------------------"
set backspace=2 " make backspace work like most other apps
" make sure we can navigate very long lines as expected
nnoremap j gj 
nnoremap k gk
" make sure we can indent blocks easily, enter Visual mode, select text block
" and press '>' and '<' as much as you need to indent it
vnoremap < <gv 
vnoremap > >gv
" Hard-wrap paragraphs of text - very useful when pasting long lines
nnoremap <leader>q gqip
" Indentation
set expandtab " insert space characters whenever TAB pressed (use Ctrl-V<Tab> to insert real TAB)
set tabstop=2 " number of spaces when TAB pressed
set shiftwidth=2
set softtabstop=2
set expandtab
set smartindent
set autoindent
" Line wrapping
set wrap
set textwidth=0
set formatoptions=cqtl
set wrapmargin=0
set linebreak
set nolist


"----------------------"
" Folding
"----------------------"
set foldenable
" Override ToggleFold()
" inspired by Max Ischenko's http://www.vim.org/tips/tip.php?tip_id=108
function! ToggleFold()
  if foldlevel('.') == 0
     " No fold exists at the current line,
     " so create a fold based on indentation

     let l_min = line('.')   " the current line number
     let l_max = line('$')   " the last line number
     let i_min = indent('.') " the indentation of the current line
     let l = l_min + 1

     " Search downward for the last line whose indentation > i_min
     while l <= l_max
        " if this line is not blank ...
        if strlen(getline(l)) > 0 && getline(l) !~ '^\s*$'
           if indent(l) <= i_min
              " we've gone too far
              let l = l - 1    " backtrack one line
              break
           endif
        endif
        let l = l + 1
     endwhile

     " Clamp l to the last line
     if l > l_max
        let l = l_max
     endif

     " Backtrack to the last non-blank line
     while l > l_min
        if strlen(getline(l)) > 0 && getline(l) !~ '^\s*$'
           break
        endif
        let l = l - 1
     endwhile

     "execute "normal i" . l_min . "," . l . " fold"   " print debug info

     if l > l_min
        " Create the fold from l_min to l
        execute l_min . "," . l . " fold"
     endif
  else
     " Delete the fold on the current line
     normal zd
  endif
endfunction
" Shortcut to toggle folding
vmap <space> zf
nmap <space> :call ToggleFold()<CR>
" Customize the look of collapsed folds
highlight Folded ctermfg=yellow ctermbg=NONE
set foldtext=getline(v:foldstart)
" Auto-save the folds when saving file
au BufWinLeave * silent! mkview
" Auto-load the fold when opening file
au BufWinEnter * silent! loadview
" Save only fold info in views
set viewoptions=folds


"----------------------"
" Code completion
"----------------------"
imap <leader><tab> <C-x><C-o>
" Activate TAB auto-completion for file paths
set wildmode=list:longest
" http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'


"---------------------------"
" Pathogen - Plugins manager
"---------------------------"
call pathogen#infect()

"----------------------"
" PLUGIN - NERDTree
"----------------------"
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\env','\.vim$', '\~$', '\.pyc$', '\.swp$', '\.egg-info$', '^dist$', '^build$']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\~$']
let NERDTreeShowBookmarks=1
let NERDTreeHightlightCursorline=1
let NERDTreeShowHidden=1 " Show hidden files
" autoopen NERDTree but ONLY if no file was requested
function! StartUp()
    if !exists("s:std_in") && 0 == argc()
        NERDTree
    end
endfunction
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * call StartUp()
" Map NERDTreeToggle to convenient key
nmap <leader>n :NERDTreeToggle<cr>
nmap <silent> <F3> :NERDTreeToggle<cr>

"----------------------"
" PLUGIN - Sparkup (zencoding)
"----------------------"
let g:sparkup = 'sparkup'
let g:sparkupArgs = '--no-last-newline'
let g:sparkupExecuteMapping = '<C-e>'
let g:sparkupNextMapping = '<C-n>'

"----------------------"
" PLUGIN - tComment
"----------------------"
map <leader>c <C-_><C-_>

"----------------------"
" PLUGIN - taglist
"----------------------"
let Tlist_Ctags_Cmd='/usr/local/bin/ctags'
let Tlist_Inc_Winwidth=0

"----------------------"
" PLUGIN - RSpec
"----------------------"
map <leader>s :RunSpec<cr>

"----------------------"
" Markdown
"----------------------"
" Markdown to HTML - make sure to download Markdown.pl to /usr/local/bin
nmap <leader>md :%!/usr/local/bin/Markdown.pl --html4tags<cr>


" Any local customizations should be made in .vimrc.local file
" you would most likely create .vimrc.local in the same dir with your $MYVIMRC file
let $VIMHOME=expand('<sfile>:p:h')
if filereadable(expand('$VIMHOME/.vimrc.local'))
  source $VIMHOME/.vimrc.local
endif
