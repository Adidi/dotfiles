" Forget compatibility with VI - must be the first line
set nocompatible

" Enable 256 colors mode
set t_Co=256

" UTF-8
set encoding=utf-8
if has("multi_byte")
	if &termencoding == ""
		let &termencoding = &encoding
	endif
   set encoding=utf-8                     " better default than latin1
   setglobal fileencoding=utf-8           " change default file encoding when writing new files
endif

" Enable filetype detection and file-type specific plugins
filetype on
filetype indent on
filetype plugin on
syntax on

"----------------------"
" Custom Filetypes
"----------------------"
au BufNewFile,BufRead *.less set filetype=css " Recognize .less files as .css

"----------------------"
" Files & Buffers
"----------------------"
" Write the old file when switching between files
set autowrite
" Switch between buffers without saving
set hidden
" Apply new configuration after .VIMRC is saved
autocmd! bufwritepost .vimrc source %
" Automatically change current directory to that of the file in the buffer
autocmd BufEnter * cd %:p:h
" Delete all buffers
nmap <silent> <leader>da :exec "1," . bufnr('$') . "bd"<cr>

"----------------------"
" UI stuff
"----------------------"
set background=dark " Used by some colorschemes (for example Solarized theme may be 'dark' or 'light')
colorscheme solarized " Select colorscheme from ~/.vim/colors/
set guifont=*
set number " Show lines numbers
"set relativenumber " Relative line numbering, works in VIM version 7.3 and higher
set linespace=3 " Higher line height - works only in GUI mode, not in terminal..
set laststatus=2 " Show status line
" Customize statusline: [Filename] [Filetype] [GIT] [Cursor Line,Column]
set statusline=%t\ %y\ %{fugitive#statusline()}\ [%l,%c]
" Show additional helpful info (like number of selected lines) in the bottom right of the screen
set showcmd
" Keep current screen unmoved when creating new split screen
set splitbelow
set splitright
" Set incremental search - search when you type, very cool
set incsearch
" Highlight search - looks like it is enabled by default, but anyways
set hlsearch " use :nohlsearch to cancel highlighted selection
" Hide MacVim toolbar
set go-=T
" Hide mouse when typing
set mousehide


"----------------------"
" Move around
"----------------------"
set backspace=2 " make backspace work like most other apps
" make sure we can navigate very long lines as expected
nnoremap j gj 
nnoremap k gk
" make sure we can indent blocks easily, enter Visual mode, select text block
" and press '>' and '<' as much as you need to indent it
vnoremap < <gv 
vnoremap > >gv
" Hard-wrap paragraphs of text - very useful when pasting long lines
nnoremap <leader>q gqip
" Indentation
set tabstop=3 " number of spaces when TAB pressed
set shiftwidth=3
set softtabstop=3
set expandtab
set smartindent
set autoindent
" Line wrapping
set wrap
set textwidth=79 " Limit line length to 79 characters
set formatoptions=cqt
set wrapmargin=0
set linebreak
" Enable code folding
set foldenable
" Shortcut to fold tags, use l to unfold
nnoremap <leader>f Vatzf

"----------------------"
" Code completion
"----------------------"
imap <leader><tab> <C-x><C-o>
" Autocompletion
set wildmode=list:longest
" http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'


"-----------------------------"
" Abbreviations and Shortcuts
"-----------------------------"
" Override <leader> defaults
let mapleader = ","
let maplocalleader = ","
" Lower the timeout after typing the leader key + command
set timeoutlen=500

" ABBREVIATIONS - commands typed in CLI (after colon)
" -------------------------------
" Open current file in Firefox - syntax may differ from one OS to another
abbrev ff :!firefox % &<cr>

" IMAPS - Insert mode shortcuts
" -------------------------------
" Shortcut for ESC
imap jj <esc>

" NMAPS - Normal Mode shortcuts
" -------------------------------
" set space as a shortcut for colon - very useful
nmap <space> :
" fast .VIMRC edit
nmap <leader>ev :tabedit $MYVIMRC<cr>
" Markdown to HTML - make sure to download Markdown.pl to /usr/local/bin
nmap <leader>md :%!/usr/local/bin/Markdown.pl --html4tags<cr>
" Quicly cancel highlighted selection
nmap <leader>h :nohlsearch<cr>


"---------------------------"
" Pathogen - Plugins manager
"---------------------------"
call pathogen#infect()

"----------------------"
" PLUGIN - NERDTree
"----------------------"
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\env','\.vim$', '\~$', '\.pyc$', '\.swp$', '\.egg-info$', '^dist$', '^build$']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\~$']
let NERDTreeShowBookmarks=1
let NERDTreeHightlightCursorline=1
let NERDTreeShowHidden=1 " Show hidden files
" autoopen NERDTree and focus cursor in new document
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p
" Map NERDTreeToggle to convenient key
nmap <leader>n :NERDTreeToggle<cr>

"----------------------"
" PLUGIN - Sparkup (zencoding)
"----------------------"
let g:sparkup = 'sparkup'
let g:sparkupArgs = '--no-last-newline'
let g:sparkupExecuteMapping = '<C-e>'
let g:sparkupNextMapping = '<C-n>'

"----------------------"
" PLUGIN - tComment
"----------------------"
map <leader>c <C-_><C-_>

" Reload filetype stuff after loading the config. Necessary.
filetype off
filetype indent plugin on
